# For command line usage, we provide a shell script which does the same job as the "Build" button in the Ribbon Designer and converts the XML file generated by the ribbon designer into the necessary RES and PAS files.
# 
# powershell -f .\Generate.Ribbon.Markup.pas.ps1 "..\..\Samples\High Level\02 Text Pad with Action List\Ribbon\RibbonMarkup.xml"
#
# As a second optional parameter you can supply the resource name of the ribbon in the RES-file. If omitted, the name will be APPLICATION_RIBBON.
# For more details please visit the Wiki at:  https://github.com/TurboPack/RibbonFramework/wiki/Tutorial:-Integrating-with-Delphi

# Stop on errors
$ErrorActionPreference = "Stop"

$xmlFilePath = $args[0]
if ([string]::IsNullOrEmpty($xmlFilePath))
{
    write "Please specify a ribbon XML file as first paramter. Aborting execution."
    exit 1
}

# Determine the current working directory from the given xml file path
$workingDir = ([System.IO.Path]::GetDirectoryName($xmlFilePath))
if ([string]::IsNullOrEmpty($workingDir))
{
    $workingDir = "."
}
$workingDir = $workingDir + ([System.IO.Path]::DirectorySeparatorChar)

# Prepare file paths for the files that we want to create
$pasFilePath = $workingDir + ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath) + ".pas")
$bmlFilePath = $workingDir + ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath) + ".bml")
$rcFilePath = $workingDir + ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath) + ".rc")
$headerFilePath = $workingDir + ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath) + ".h")
$resFileName = ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath) + ".res")
$unitName = ([System.IO.Path]::GetFileNameWithoutExtension($xmlFilePath))

$ResourceName = $args[1]
if ([string]::IsNullOrEmpty($ResourceName))
{
  $ResourceName = "APPLICATION"
}

$UICCDir = $args[2]

# Checks if a file exists under a given location. If yes, the path to this file is returned. If not, we lookup several known locations and return those, if the file is found.
function FindFileInLocation($pLocation, $pFileName)
{   
    # First check if a valid path was passed via the command line
	if ($pLocation)
	{
        $lPath = Join-Path $pLocation $pFileName
        if (Test-Path $lPath)
        {
            return $lPath
        }
	}
    # Check if the file exists under %PATH%
    if (Get-Command $pFileName -ErrorAction SilentlyContinue)
    {
        return "$pFileName"
    }    
    # If not, check a few known locations for uicc.exe
    elseif (Test-Path "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v7.1A\Bin\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v7.1A\Bin\$pFileName"
    }
    elseif (Test-Path "${env:ProgramFiles}\Microsoft SDKs\Windows\v7.1\Bin\$pFileName")
    {
        return "${env:ProgramFiles}\Microsoft SDKs\Windows\v7.1\Bin\$pFileName"
    }
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\8.0\bin\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\8.0\bin\x86\$pFileName"
    }
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\x86\$pFileName"
    }    
# begin modification: add the path to windows 10 sdk.
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.00\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17134.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17134.0\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.16299.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.16299.0\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.15063.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.15063.0\x86\$pFileName"
    }    
    elseif (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.14393.0\x86\$pFileName")
    {
        return "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.14393.0\x86\$pFileName"
    }    
# end modification.
    elseif (Test-Path "$PSScriptRoot\$pFileName")
    {
        return "$PSScriptRoot\$pFileName"
    }    
    else
    {
        # Nothing found -> exit
        write "Cannot find $pFileName. Aborting execution."
        exit 1
    }
}

# Find UICC.exe
$UICCCmd = FindFileInLocation -pLocation $UICCDir -pFileName "UICC.exe"
write-host "UICC.exe found: Using $UICCCmd"

# Use the provided xml file to Create the .bml, .h and .rc file
& $UICCCmd "/W0" "$xmlFilePath" "$bmlFilePath" "/header:$headerFilePath" "/res:$rcFilePath" "/name:$ResourceName"
If ($LASTEXITCODE -ne 0) 
{
    exit $LASTEXITCODE
}

# Find rc.exe (Use the same locations as UICC.exe)
$RCCmd = FindFileInLocation -pLocation $UICCDir -pFileName "rc.exe"
write-host "RC.exe found: Using $RCCmd"

# Create the .RES resource file
& $RCCmd "$rcFilePath"
If ($LASTEXITCODE -ne 0) 
{
    exit $LASTEXITCODE
}

# Create a new Markup .pas file that will contain the Ribbon command constants.

[System.Collections.ArrayList]$markupContent = New-Object([System.Collections.ArrayList])

$FileTopPart = @"
unit $unitName;

// *****************************************************************************
// * This is an automatically generated source file for UI Element definition  *
// * resource symbols and values. Please do not modify manually.               *
// *****************************************************************************

interface

{`$R '$resFileName'}

uses
	Generics.Collections, SysUtils, UIRibbon;

const
"@

write-host "Setting content to " + $pasFilePath
$pasFile = New-Object System.IO.StreamWriter $pasFilePath
$pasfile.WriteLine($FileTopPart)

# Get content of the header file (e.g. TreeSize.Ribbon.Markup.h).
$data = Get-Content "$headerFilePath"

foreach ($line in $data)
{
	if ($line.Contains("#define"))
	{
        $part = $line.TrimStart("#define").Split(" ")
		$appendLine = "  " + $part[1] + " = " + $part[2] + ";"
        $dummy = $markupContent.Add($appendLine);
	}
}

$pasfile.WriteLine($($markupContent -join [Environment]::NewLine))
# Add some additional predefined text.
$FileMiddlePart = @"

implementation

function RegisterRibbonElements(): TRibbonMarkupElementList;
begin
  Result := TRibbonMarkupElementList.Create('$ResourceName');
"@

$pasfile.WriteLine($FileMiddlePart)
    

# Add the mapping by using the previously generated markup content

# Initialization
$commandName = ""
$LabelTitleResourceID = -1
$LabelDescriptionResourceID = -1
$TooltipTitleResourceID = -1
$TooltipDescriptionResourceID = -1

#RegEx for resource IDs
$resourceIdRegexPattern = "\b\d{1,5}\b"

foreach ($line in $markupContent)
{
	if (!($line.Contains("RESID")))
	{       
		if (($commandName) -and ($commandID))
		{
			$appendLine = "  Result.Add(TRibbonMarkupElement.Create('$commandName', $commandId, $LabelTitleResourceID, $LabelDescriptionResourceID, $TooltipTitleResourceID, $TooltipDescriptionResourceID));"
			$pasfile.WriteLine($appendLine)
			$LabelTitleResourceID = -1
            $LabelDescriptionResourceID = -1
            $TooltipTitleResourceID = -1
            $TooltipDescriptionResourceID = -1
		}
	
		$commandName = ([regex]"\b\w+\b").match($line).groups[0].value
		$commandId = ([regex]$resourceIdRegexPattern).match($line).groups[0].value
		continue
	}
	if ($commandName -and $line.Contains($commandName))
	{
		if ($line.Contains("LabelTitle")) 
		{
			$LabelTitleResourceID = ([regex]$resourceIdRegexPattern).match($line).groups[0].value
		}
		elseif ($line.Contains("LabelDescription")) 
		{
			$LabelDescriptionResourceID = ([regex]$resourceIdRegexPattern).match($line).groups[0].value
		}
		elseif ($line.Contains("TooltipTitle")) 
		{
			$TooltipTitleResourceID = ([regex]$resourceIdRegexPattern).match($line).groups[0].value
		}
		elseif ($line.Contains("TooltipDescription")) 
		{
			$TooltipDescriptionResourceID = ([regex]$resourceIdRegexPattern).match($line).groups[0].value
		}
	}
}

if (($commandName) -and ($commandID))
{
	$appendLine = "  Result.Add(TRibbonMarkupElement.Create('$commandName', $commandId, $LabelTitleResourceID, $TooltipTitleResourceID));"    
	$pasfile.WriteLine($appendLine)
}

# Add the ending part
$FileEndPart = @"
end;
initialization

  RegisterRibbonElements();
  
end.
"@

$pasFile.WriteLine($FileEndPart)
$pasFile.Close()
write-host "Ribbon pascal markup file generation successful: '$pasFilePath'"

# SIG # Begin signature block
# MIIyaQYJKoZIhvcNAQcCoIIyWjCCMlYCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCOCSgMvUmIfwKi
# KKYxxtAkU8Sp+eM+nWrUFXy8ACoeY6CCF6owggNfMIICR6ADAgECAgsEAAAAAAEh
# WFMIojANBgkqhkiG9w0BAQsFADBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3Qg
# Q0EgLSBSMzETMBEGA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2ln
# bjAeFw0wOTAzMTgxMDAwMDBaFw0yOTAzMTgxMDAwMDBaMEwxIDAeBgNVBAsTF0ds
# b2JhbFNpZ24gUm9vdCBDQSAtIFIzMRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYD
# VQQDEwpHbG9iYWxTaWduMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
# zCV2kHkGeCIW9cCDtoTKKJ79BXYRxa2IcvxGAkPHsoqdBF8kyy5L4WCCRuFSqwyB
# R3Bs3WTR6/Usow+CPQwrrpfXthSGEHm7OxOAd4wI4UnSamIvH176lmjfiSeVOJ8G
# 1z7JyyZZDXPesMjpJg6DFcbvW4vSBGDKSaYo9mk79svIKJHlnYphVzesdBTcdOA6
# 7nIvLpz70Lu/9T0A4QYz6IIrrlOmOhZzjN1BDiA6wLSnoemyT5AuMmDpV8u5BJJo
# aOU4JmB1sp93/5EU764gSfytQBVI0QIxYRleuJfvrXe3ZJp6v1/BE++bYvsNbOBU
# aRapA9pu6YOTcXbGaYWCFwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0T
# AQH/BAUwAwEB/zAdBgNVHQ4EFgQUj/BLf6guRSSuTVD6Y5qL3uLdG7wwDQYJKoZI
# hvcNAQELBQADggEBAEtA28BQqv7IDO/3llRFSbuWAAlBrLMThoYoBzPKa+Z0uboA
# La6kCtP18fEPir9zZ0qDx0R7eOCvbmxvAymOMzlFw47kuVdsqvwSluxTxi3kJGy5
# lGP73FNoZ1Y+g7jPNSHDyWj+ztrCU6rMkIrp8F1GjJXdelgoGi8d3s0AN0GP7URt
# 11Mol37zZwQeFdeKlrTT3kwnpEwbc3N29BeZwh96DuMtCK0KHCz/PKtVDg+Rfjbr
# w1dJvuEuLXxgi8NBURMjnc73MmuUAaiZ5ywzHzo7JdKGQM47LIZ4yWEvFLru21Vv
# 34TuBQlNvSjYcs7TYlBlHuuSl4Mx2bO1ykdYP18wggWiMIIEiqADAgECAhB4AxhC
# RXCKQc9vAbjutKlUMA0GCSqGSIb3DQEBDAUAMEwxIDAeBgNVBAsTF0dsb2JhbFNp
# Z24gUm9vdCBDQSAtIFIzMRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpH
# bG9iYWxTaWduMB4XDTIwMDcyODAwMDAwMFoXDTI5MDMxODAwMDAwMFowUzELMAkG
# A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExKTAnBgNVBAMTIEds
# b2JhbFNpZ24gQ29kZSBTaWduaW5nIFJvb3QgUjQ1MIICIjANBgkqhkiG9w0BAQEF
# AAOCAg8AMIICCgKCAgEAti3FMN166KuQPQNysDpLmRZhsuX/pWcdNxzlfuyTg6qE
# 9aNDm5hFirhjV12bAIgEJen4aJJLgthLyUoD86h/ao+KYSe9oUTQ/fU/IsKjT5GN
# swWyKIKRXftZiAULlwbCmPgspzMk7lA6QczwoLB7HU3SqFg4lunf+RuRu4sQLNLH
# Qx2iCXShgK975jMKDFlrjrz0q1qXe3+uVfuE8ID+hEzX4rq9xHWhb71hEHREspgH
# 4nSr/2jcbCY+6R/l4ASHrTDTDI0DfFW4FnBcJHggJetnZ4iruk40mGtwEd44ytS+
# ocCc4d8eAgHYO+FnQ4S2z/x0ty+Eo7+6CTc9Z2yxRVwZYatBg/WsHet3DUZHc86/
# vZWV7Z0riBD++ljop1fhs8+oWukHJZsSxJ6Acj2T3IyU3ztE5iaA/NLDA/CMDNJF
# 1i7nj5ie5gTuQm5nfkIWcWLnBPlgxmShtpyBIU4rxm1olIbGmXRzZzF6kfLUjHlu
# fKa7fkZvTcWFEivPmiJECKiFN84HYVcGFxIkwMQxc6GYNVdHfhA6RdktpFGQmKmg
# BzfEZRqqHGsWd/enl+w/GTCZbzH76kCy59LE+snQ8FB2dFn6jW0XMr746X4D9OeH
# dZrUSpEshQMTAitCgPKJajbPyEygzp74y42tFqfT3tWbGKfGkjrxgmPxLg4kZN8C
# AwEAAaOCAXcwggFzMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcD
# AzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQfAL9GgAr8eDm3pbRD2VZQu86W
# OzAfBgNVHSMEGDAWgBSP8Et/qC5FJK5NUPpjmove4t0bvDB6BggrBgEFBQcBAQRu
# MGwwLQYIKwYBBQUHMAGGIWh0dHA6Ly9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3Ry
# MzA7BggrBgEFBQcwAoYvaHR0cDovL3NlY3VyZS5nbG9iYWxzaWduLmNvbS9jYWNl
# cnQvcm9vdC1yMy5jcnQwNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5nbG9i
# YWxzaWduLmNvbS9yb290LXIzLmNybDBHBgNVHSAEQDA+MDwGBFUdIAAwNDAyBggr
# BgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8w
# DQYJKoZIhvcNAQEMBQADggEBAKz3zBWLMHmoHQsoiBkJ1xx//oa9e1ozbg1nDnti
# 2eEYXLC9E10dI645UHY3qkT9XwEjWYZWTMytvGQTFDCkIKjgP+icctx+89gMI7qo
# Lao89uyfhzEHZfU5p1GCdeHyL5f20eFlloNk/qEdUfu1JJv10ndpvIUsXPpYd9Gu
# p7EL4tZ3u6m0NEqpbz308w2VXeb5ekWwJRcxLtv3D2jmgx+p9+XUnZiM02FLL8Mo
# fnrekw60faAKbZLEtGY/fadY7qz37MMIAas4/AocqcWXsojICQIZ9lyaGvFNbDDU
# swarAGBIDXirzxetkpNiIHd1bL3IMrTcTevZ38GQlim9wX8wggboMIIE0KADAgEC
# AhB3vQ4Ft1kLth1HYVMeP3XtMA0GCSqGSIb3DQEBCwUAMFMxCzAJBgNVBAYTAkJF
# MRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMSkwJwYDVQQDEyBHbG9iYWxTaWdu
# IENvZGUgU2lnbmluZyBSb290IFI0NTAeFw0yMDA3MjgwMDAwMDBaFw0zMDA3Mjgw
# MDAwMDBaMFwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNh
# MTIwMAYDVQQDEylHbG9iYWxTaWduIEdDQyBSNDUgRVYgQ29kZVNpZ25pbmcgQ0Eg
# MjAyMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMsg75ceuQEyQ6Bb
# qYoj/SBerjgSi8os1P9B2BpV1BlTt/2jF+d6OVzA984Ro/ml7QH6tbqT76+T3Pji
# sxlMg7BKRFAEeIQQaqTWlpCOgfh8qy+1o1cz0lh7lA5tD6WRJiqzg09ysYp7ZJLQ
# 8LRVX5YLEeWatSyyEc8lG31RK5gfSaNf+BOeNbgDAtqkEy+FSu/EL3AOwdTMMxLs
# vUCV0xHK5s2zBZzIU+tS13hMUQGSgt4T8weOdLqEgJ/SpBUO6K/r94n233Hw0b6n
# skEzIHXMsdXtHQcZxOsmd/KrbReTSam35sOQnMa47MzJe5pexcUkk2NvfhCLYc+Y
# VaMkoog28vmfvpMusgafJsAMAVYS4bKKnw4e3JiLLs/a4ok0ph8moKiueG3soYgV
# PMLq7rfYrWGlr3A2onmO3A1zwPHkLKuU7FgGOTZI1jta6CLOdA6vLPEV2tG0leis
# 1Ult5a/dm2tjIF2OfjuyQ9hiOpTlzbSYszcZJBJyc6sEsAnchebUIgTvQCodLm3H
# adNutwFsDeCXpxbmJouI9wNEhl9iZ0y1pzeoVdwDNoxuz202JvEOj7A9ccDhMqeC
# 5LYyAjIwfLWTyCH9PIjmaWP47nXJi8Kr77o6/elev7YR8b7wPcoyPm593g9+m5XE
# EofnGrhO7izB36Fl6CSDySrC/blTAgMBAAGjggGtMIIBqTAOBgNVHQ8BAf8EBAMC
# AYYwEwYDVR0lBAwwCgYIKwYBBQUHAwMwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNV
# HQ4EFgQUJZ3Q/FkJhmPF7POxEztXHAOSNhEwHwYDVR0jBBgwFoAUHwC/RoAK/Hg5
# t6W0Q9lWULvOljswgZMGCCsGAQUFBwEBBIGGMIGDMDkGCCsGAQUFBzABhi1odHRw
# Oi8vb2NzcC5nbG9iYWxzaWduLmNvbS9jb2Rlc2lnbmluZ3Jvb3RyNDUwRgYIKwYB
# BQUHMAKGOmh0dHA6Ly9zZWN1cmUuZ2xvYmFsc2lnbi5jb20vY2FjZXJ0L2NvZGVz
# aWduaW5ncm9vdHI0NS5jcnQwQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2NybC5n
# bG9iYWxzaWduLmNvbS9jb2Rlc2lnbmluZ3Jvb3RyNDUuY3JsMFUGA1UdIAROMEww
# QQYJKwYBBAGgMgECMDQwMgYIKwYBBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNp
# Z24uY29tL3JlcG9zaXRvcnkvMAcGBWeBDAEDMA0GCSqGSIb3DQEBCwUAA4ICAQAl
# daAJyTm6t6E5iS8Yn6vW6x1L6JR8DQdomxyd73G2F2prAk+zP4ZFh8xlm0zjWAYC
# ImbVYQLFY4/UovG2XiULd5bpzXFAM4gp7O7zom28TbU+BkvJczPKCBQtPUzosLp1
# pnQtpFg6bBNJ+KUVChSWhbFqaDQlQq+WVvQQ+iR98StywRbha+vmqZjHPlr00Bid
# /XSXhndGKj0jfShziq7vKxuav2xTpxSePIdxwF6OyPvTKpIz6ldNXgdeysEYrIEt
# GiH6bs+XYXvfcXo6ymP31TBENzL+u0OF3Lr8psozGSt3bdvLBfB+X3Uuora/Nao2
# Y8nOZNm9/Lws80lWAMgSK8YnuzevV+/Ezx4pxPTiLc4qYc9X7fUKQOL1GNYe6ZAv
# ytOHX5OKSBoRHeU3hZ8uZmKaXoFOlaxVV0PcU4slfjxhD4oLuvU/pteO9wRWXiG7
# n9dqcYC/lt5yA9jYIivzJxZPOOhRQAyuku++PX33gMZMNleElaeEFUgwDlInCI2O
# or0ixxnJpsoOqHo222q6YV8RJJWk4o5o7hmpSZle0LQ0vdb5QMcQlzFSOTUpEYck
# 08T7qWPLd0jV+mL8JOAEek7Q5G7ezp44UCb0IXFl1wkl1MkHAHq4x/N36MXU4lXQ
# 0x72f1LiSY25EXIMiEQmM2YBRN/kMw4h3mKJSAfa9TCCB7EwggWZoAMCAQICDCng
# kz3F/0IWI8ttxDANBgkqhkiG9w0BAQsFADBcMQswCQYDVQQGEwJCRTEZMBcGA1UE
# ChMQR2xvYmFsU2lnbiBudi1zYTEyMDAGA1UEAxMpR2xvYmFsU2lnbiBHQ0MgUjQ1
# IEVWIENvZGVTaWduaW5nIENBIDIwMjAwHhcNMjMwNzMxMTQ0MjIwWhcNMjYwNzMx
# MTQ0MjIwWjCCARUxHTAbBgNVBA8MFFByaXZhdGUgT3JnYW5pemF0aW9uMREwDwYD
# VQQFEwhIUkIgNDkyMDETMBEGCysGAQQBgjc8AgEDEwJERTEgMB4GCysGAQQBgjc8
# AgECEw9SaGVpbmxhbmQtUGZhbHoxGTAXBgsrBgEEAYI3PAIBARMIV2l0dGxpY2gx
# CzAJBgNVBAYTAkRFMRgwFgYDVQQIEw9SaGVpbmxhbmQtUGZhbHoxDjAMBgNVBAcT
# BVRyaWVyMSAwHgYDVQQJExdBbSBXaXNzZW5zY2hhZnRzcGFyayAyNjEaMBgGA1UE
# ChMRSkFNIFNvZnR3YXJlIEdtYkgxGjAYBgNVBAMTEUpBTSBTb2Z0d2FyZSBHbWJI
# MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1ufc4umim7m0lnneCjqR
# CX0ne35StpHUpGMycQDIH+OFbT3S9tRsq0LwnUmW/qfU14MYlGvTy6Lt0+gbTc1I
# ZsWs93BC4G062vIDwj8W2NvYL4cFtf5LxG1NisFV5igJYDLt21Y/VildcjdGVgGw
# +FZ62dM4fYUVkU74ovXa6/L4OkBTlZ8UTbM7p8oVTe3FVp7nqGZU9JhdkWAC3xv8
# pgTxzrs2H9Wv36PQz40f39b2CPAcQN76USqchRGCLr3SnBhF7+cNHB2jumjGbQrv
# YsP0HK2/kKlCRGgzfqCnV0uVHqx1CNxnMzGtUyoE2Z/m+m/b42nHc+fWcnxfR/1f
# aAsQv0Vj75RIf1S8DnW6OUN+xbY/7FLyTCpah/G0Mx8QahzgxsGxTXSzONmBnDnV
# 9zXtrW+euPnqr39aUu3whHkVy1zKJM4zK6KGMa/IHNFnaoL+Nu6Wu4KK9AXQTh7x
# MsNtAXcCDVFFvqoUQnUx7WaUjer6J/4/I88pgBnnL3PbAnza6QqsgzDklpOhSgL/
# LX9IrbmPEr9Wb+EV9nRsNK2g6ShisnGll2UdsWK6TSsLlNajGBUO3y59cq7VZrgw
# vwiHNKa/PSrtdK3K4nl70VheUxK1H3IpV6tksCOfeuUWwT3/dB5LHywqWVW1rQtB
# cZI8sUaKUwM00liJ7VL/i+ECAwEAAaOCAbYwggGyMA4GA1UdDwEB/wQEAwIHgDCB
# nwYIKwYBBQUHAQEEgZIwgY8wTAYIKwYBBQUHMAKGQGh0dHA6Ly9zZWN1cmUuZ2xv
# YmFsc2lnbi5jb20vY2FjZXJ0L2dzZ2NjcjQ1ZXZjb2Rlc2lnbmNhMjAyMC5jcnQw
# PwYIKwYBBQUHMAGGM2h0dHA6Ly9vY3NwLmdsb2JhbHNpZ24uY29tL2dzZ2NjcjQ1
# ZXZjb2Rlc2lnbmNhMjAyMDBVBgNVHSAETjBMMEEGCSsGAQQBoDIBAjA0MDIGCCsG
# AQUFBwIBFiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAH
# BgVngQwBAzAJBgNVHRMEAjAAMEcGA1UdHwRAMD4wPKA6oDiGNmh0dHA6Ly9jcmwu
# Z2xvYmFsc2lnbi5jb20vZ3NnY2NyNDVldmNvZGVzaWduY2EyMDIwLmNybDATBgNV
# HSUEDDAKBggrBgEFBQcDAzAfBgNVHSMEGDAWgBQlndD8WQmGY8Xs87ETO1ccA5I2
# ETAdBgNVHQ4EFgQUfw5IpLUmUHopR/B7s2Ld/KTjh2QwDQYJKoZIhvcNAQELBQAD
# ggIBABXad954xS4K7vj5I5zFcWqAbuuVWnHr7TIH8MhTb1dsfa801b3u4VRU3Jo5
# 3X5We2EXbWd9W+s94OZzLZbVr8o1CRPsMIE6HodnKBrpE1b7p3E0M8nrAYQQobxS
# LG2e4BDR9pJY3e2kVhymxn0PP/DL3QxNHO2J46sdJznT7vd0UZ0KgmJuAxsYBY8F
# UBiOh8E0dQCov0oKr4mA/Hs7vc359w/CGRoa5tw4oneGgXqcQ/XZ+sqtp6jPtYVr
# 5QujesLsNbM7GXhgCjPCbYKMMxy60kJZIC9oBLiumGhi9WBpiMAR+p+jCZMcNZwU
# bTh1Cgvjx0CPT7y2NbIm1xaVGH2340CloYXXGbPgHRx5bMQXGhHh7xpxqYJQ/NAo
# ypWDZZ6TwoYW7KWQcKd2E//hOlRz4SX0C4gzlTf5sEUqzsdozuEZRhJF7DWmhGqK
# DI+Z8Rzux5M/CUUZOTI+xHxuX9By9RNjD5n8rASEu7P+f34rfXel6jOxgqJWjjKS
# 8c/BqBr45WFcj8CekBhfIa3VBRt4nbuigaikcvUyfG2KZ4dRK4nKIJb3RFyIKdUw
# 3jcIGLLC83Gd6K+qXBOBuOww+Negy19EWBBZfqCgB9KdMlTifihKVfaInCzpvwhg
# L+U0inLuuHPAiyQ0JPETdEEpauGRCoL67UWjJykCcEPWWDuxMYIaFTCCGhECAQEw
# bDBcMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEyMDAG
# A1UEAxMpR2xvYmFsU2lnbiBHQ0MgUjQ1IEVWIENvZGVTaWduaW5nIENBIDIwMjAC
# DCngkz3F/0IWI8ttxDANBglghkgBZQMEAgEFAKCBvDAZBgkqhkiG9w0BCQMxDAYK
# KwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG
# 9w0BCQQxIgQglrLXkYaP/sWJMWkxkCOENIGe68+YEbvvCxXH8BJjky0wUAYKKwYB
# BAGCNwIBDDFCMECgHoAcAFIAaQBiAGIAbwBuAEQAZQBzAGkAZwBuAGUAcqEegBxo
# dHRwczovL3d3dy5qYW0tc29mdHdhcmUuY29tMA0GCSqGSIb3DQEBAQUABIICAG3Q
# tLNHao4n0NlWGdstKv8KHjen4Nql+dDsCPUlgbaf2ecnun5Mt8vQeGqTJ0vycLgn
# DIos331WaPBuVMUvMnPzmA9OVxC9JXVE7Fw5u9mMhJu6hjJFM8ZUKQKVHBvZaHFT
# by8vxRAg8dKy9dWdv3O7ysm9GImK5ADMidqJ3tLVsRIkY0/EI6e4P2CFi2ARQElb
# kD0X5AZYz2Q+ITqJLH8cNCj6dEoVSTtcENHmWPEzgYKBTeHXP+kbS9daaqf+6jHb
# zmD7K5gEfzr8IyrTQsk/kZfj8Xqx6peLRdFe8cIWHaevwqvv0JA+w00yfzb10eYj
# L8Bw+RO0WBovipDORlUo4rH5foKtg0PItBApwvMjuJBeBLgpHO9SmVE53caf0aT8
# MBVHkSDOtDervpELtnCEa4Iq2dRq0d8XihEWBRQYoo0gK5XShFBpjL3QKgB3hAzs
# UuUGcI39JvQ7Y7igADOoLQbx8jKX9Z7aRRN7b8Gc5MxcblDEnD9fUm3dtXryzpWi
# /efF1t+PUJdrIkFEZ6zsgvJJMbyG9u6eORhUm40EEa3kIZEkZ/+uFe/ajb7Syula
# h+emdFg1/YsEp3gzKT1UFOlxaNZblgBXuwo1mAvCSJiRYLmikvBshHYVsM5Nd6b6
# CSt/Z018eQXt0eZ1GsHEVhkcab4AgF+96bqEi8pdoYIWuzCCFrcGCisGAQQBgjcD
# AwExghanMIIWowYJKoZIhvcNAQcCoIIWlDCCFpACAQMxDTALBglghkgBZQMEAgEw
# gd8GCyqGSIb3DQEJEAEEoIHPBIHMMIHJAgEBBgsrBgEEAaAyAgMBAjAxMA0GCWCG
# SAFlAwQCAQUABCB1P4UZWC8FOZku4JdkIJVrMavxHS+pHMqHNtBTw/7W1gIUXDT5
# IlIiOu4q/eg9zLz95EKP6tgYDzIwMjUxMDIyMDYzNTQ5WjADAgEBoFikVjBUMQsw
# CQYDVQQGEwJCRTEZMBcGA1UECgwQR2xvYmFsU2lnbiBudi1zYTEqMCgGA1UEAwwh
# R2xvYmFsc2lnbiBUU0EgZm9yIENvZGVTaWduMSAtIFI2oIISSzCCBmMwggRLoAMC
# AQICEAEACyAFs5QHYts+NnmUm6kwDQYJKoZIhvcNAQEMBQAwWzELMAkGA1UEBhMC
# QkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNp
# Z24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQwHhcNMjUwNDExMTQ0NzM5
# WhcNMzQxMjEwMDAwMDAwWjBUMQswCQYDVQQGEwJCRTEZMBcGA1UECgwQR2xvYmFs
# U2lnbiBudi1zYTEqMCgGA1UEAwwhR2xvYmFsc2lnbiBUU0EgZm9yIENvZGVTaWdu
# MSAtIFI2MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAolvEqk1J5SN4
# PuCF6+aqCj7V8qyop0Rh94rLmY37Cn8er80SkfKzdJHJk3Tqa9QY4UwV6hedXfSb
# 5gk0Xydy3MNEj1qE+ZomPEcjC7uRtGdfB/PtnieWJzjtPVUlmEPrUMsoFU7woJSc
# RV1W6/6efi2BySHXshZ30V1EDZ2lKQ0DK3q3bI4sJE/5n/dQy8iL4hjTaS9v0YQy
# 5RJY+o1NWhxP/HsNum67Or4rFDsGIE85hg5r4g3CXFuiqWvlNmPbCBWgdxp/PCqY
# 0Lie04DuKbDwRd6nrm5AH5oIRJyFUjLvG4HO0L1UXYMuJ6J1JzO438RA0mJRvU2Z
# wbI6yiFHaS0x3SgFakvhELLn4tmwngYPj+FDX3LaWHnni/MGJXRxnN0pQdYJqEYh
# KUlrMH9+2Klndcz/9yXYGEywTt88d3y+TUFvZlAA0BMOYMMrYFQEptlRg2DYrx5s
# WtX1qvCzk6sEBLRVPEbE0i+J01ILlBzRpcJusZUQyGK2RVSOFfXPAgMBAAGjggGo
# MIIBpDAOBgNVHQ8BAf8EBAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwHQYD
# VR0OBBYEFIBDTPy6bR0T0nUSiAl3b9vGT5VUMFYGA1UdIARPME0wCAYGZ4EMAQQC
# MEEGCSsGAQQBoDIBHjA0MDIGCCsGAQUFBwIBFiZodHRwczovL3d3dy5nbG9iYWxz
# aWduLmNvbS9yZXBvc2l0b3J5LzAMBgNVHRMBAf8EAjAAMIGQBggrBgEFBQcBAQSB
# gzCBgDA5BggrBgEFBQcwAYYtaHR0cDovL29jc3AuZ2xvYmFsc2lnbi5jb20vY2Ev
# Z3N0c2FjYXNoYTM4NGc0MEMGCCsGAQUFBzAChjdodHRwOi8vc2VjdXJlLmdsb2Jh
# bHNpZ24uY29tL2NhY2VydC9nc3RzYWNhc2hhMzg0ZzQuY3J0MB8GA1UdIwQYMBaA
# FOoWxmnn48tXRTkzpPBAvtDDvWWWMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9j
# cmwuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2FjYXNoYTM4NGc0LmNybDANBgkqhkiG
# 9w0BAQwFAAOCAgEAt6bHSpl2dP0gYie9iXw3Bz5XzwsvmiYisEjboyRZin+jqH26
# IFq7fQMIrN5VdX8KGl5pEe21b8skPfUctiroo6QS5oWESl4kzZow2iJ/qJn76Tkv
# L+v2f4mHolGLBwyDm74fXr68W63xuiYSpnbf7NYPyBaHI7zJ/ErST4bA00TC+ftP
# ttS+G/MhNUaKg34yaJ8Z6AENnPdCB8VIrt/sqd6R1k89Ojx1jL36QBEPUr2dtIIl
# S3Ki74CU15YTvG+Xxt9cwE+0Gx/qRQv8YbF+UcsdgYU4jNRZB0kTV3Bsd3lyIWmt
# 8DT4RQj9LQ1ILOpqG/Czwd9q9GJL6jSJeSq1AC4ZocVMuqcYd/D9JpIML9BQ/wk5
# lgJkgXEc1gRgPsDsU9zz36JymN1+Yhvx0Vr67jr0Qfqk3V0z6/xVmEAJKafTeIfD
# 9hQchjiGkyw3EKNiyHyM37rdK/BsTSx0rB3MHdqE9/dHQX5NUOQCWUvhkWy10u71
# yzGKWnbAWQ6NNuq9ftcwYFTmcyo5YbFwzfkyS+Y78+O9utqgi6VoE2NzVJbucqGL
# ZtJFJzGJD7xe/rqULwYHeQ3HPSnNCagb6jqBeFSnXTx0GbuYuk3jA51dQNtsogVA
# GXCqHsh62QVAl/gadTfcRaMpIWAc3CPup3x19dDApspmRyOVzXBUtsiCWsIwggZZ
# MIIEQaADAgECAg0B7BySQN79LkBdfEd0MA0GCSqGSIb3DQEBDAUAMEwxIDAeBgNV
# BAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQKEwpHbG9iYWxTaWdu
# MRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTE4MDYyMDAwMDAwMFoXDTM0MTIxMDAw
# MDAwMFowWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2Ex
# MTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0g
# RzQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDwAuIwI/rgG+GadLOv
# dYNfqUdSx2E6Y3w5I3ltdPwx5HQSGZb6zidiW64HiifuV6PENe2zNMeswwzrgGZt
# 0ShKwSy7uXDycq6M95laXXauv0SofEEkjo+6xU//NkGrpy39eE5DiP6TGRfZ7jHP
# vIo7bmrEiPDul/bc8xigS5kcDoenJuGIyaDlmeKe9JxMP11b7Lbv0mXPRQtUPbFU
# UweLmW64VJmKqDGSO/J6ffwOWN+BauGwbB5lgirUIceU/kKWO/ELsX9/RpgOhz16
# ZevRVqkuvftYPbWF+lOZTVt07XJLog2CNxkM0KvqWsHvD9WZuT/0TzXxnA/TNxNS
# 2SU07Zbv+GfqCL6PSXr/kLHU9ykV1/kNXdaHQx50xHAotIB7vSqbu4ThDqxvDbm1
# 9m1W/oodCT4kDmcmx/yyDaCUsLKUzHvmZ/6mWLLU2EESwVX9bpHFu7FMCEue1EIG
# bxsY1TbqZK7O/fUF5uJm0A4FIayxEQYjGeT7BTRE6giunUlnEYuC5a1ahqdm/TMD
# Ad6ZJflxbumcXQJMYDzPAo8B/XLukvGnEt5CEk3sqSbldwKsDlcMCdFhniaI/Miy
# Tdtk8EWfusE/VKPYdgKVbGqNyiJc9gwE4yn6S7Ac0zd0hNkdZqs0c48efXxeltY9
# GbCX6oxQkW2vV4Z+EDcdaxoU3wIDAQABo4IBKTCCASUwDgYDVR0PAQH/BAQDAgGG
# MBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFOoWxmnn48tXRTkzpPBAvtDD
# vWWWMB8GA1UdIwQYMBaAFK5sBaOTE+Ki5+LXHNbH8H/IZ1OgMD4GCCsGAQUFBwEB
# BDIwMDAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AyLmdsb2JhbHNpZ24uY29tL3Jv
# b3RyNjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLmdsb2JhbHNpZ24uY29t
# L3Jvb3QtcjYuY3JsMEcGA1UdIARAMD4wPAYEVR0gADA0MDIGCCsGAQUFBwIBFiZo
# dHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzANBgkqhkiG9w0B
# AQwFAAOCAgEAf+KI2VdnK0JfgacJC7rEuygYVtZMv9sbB3DG+wsJrQA6YDMfOcYW
# axlASSUIHuSb99akDY8elvKGohfeQb9P4byrze7AI4zGhf5LFST5GETsH8KkrNCy
# z+zCVmUdvX/23oLIt59h07VGSJiXAmd6FpVK22LG0LMCzDRIRVXd7OlKn14U7XIQ
# cXZw0g+W8+o3V5SRGK/cjZk4GVjCqaF+om4VJuq0+X8q5+dIZGkv0pqhcvb3JEt0
# Wn1yhjWzAlcfi5z8u6xM3vreU0yD/RKxtklVT3WdrG9KyC5qucqIwxIwTrIIc59e
# odaZzul9S5YszBZrGM3kWTeGCSziRdayzW6CdaXajR63Wy+ILj198fKRMAWcznt8
# oMWsr1EG8BHHHTDFUVZg6HyVPSLj1QokUyeXgPpIiScseeI85Zse46qEgok+wEr1
# If5iEO0dMPz2zOpIJ3yLdUJ/a8vzpWuVHwRYNAqJ7YJQ5NF7qMnmvkiqK1XZjbcl
# IA4bUaDUY6qD6mxyYUrJ+kPExlfFnbY8sIuwuRwx773vFNgUQGwgHcIt6AvGjW2M
# tnHtUiH+PvafnzkarqzSL3ogsfSsqh3iLRSd+pZqHcY8yvPZHL9TTaRHWXyVxENB
# +SXiLBB+gfkNlKd98rUJ9dhgckBQlSDUQ0S++qCV5yBZtnjGpGqqIpswggWDMIID
# a6ADAgECAg5F5rsDgzPDhWVI5v9FUTANBgkqhkiG9w0BAQwFADBMMSAwHgYDVQQL
# ExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSNjETMBEGA1UEChMKR2xvYmFsU2lnbjET
# MBEGA1UEAxMKR2xvYmFsU2lnbjAeFw0xNDEyMTAwMDAwMDBaFw0zNDEyMTAwMDAw
# MDBaMEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQK
# EwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMIICIjANBgkqhkiG9w0B
# AQEFAAOCAg8AMIICCgKCAgEAlQfoc8pm+ewUyns89w0I8bRFCyyCtEjG61s8roO4
# QZIzFKRvf+kqzMawiGvFtonRxrL/FM5RFCHsSt0bWsbWh+5NOhUG7WRmC5KAykTe
# c5RO86eJf094YwjIElBtQmYvTbl5KE1SGooagLcZgQ5+xIq8ZEwhHENo1z08isWy
# ZtWQmrcxBsW+4m0yBqYe+bnrqqO4v76CY1DQ8BiJ3+QPefXqoh8q0nAue+e8k7tt
# U+JIfIwQBzj/ZrJ3YX7g6ow8qrSk9vOVShIHbf2MsonP0KBhd8hYdLDUIzr3XTrK
# otudCd5dRC2Q8YHNV5L6frxQBGM032uTGL5rNrI55KwkNrfw77YcE1eTtt6y+OKF
# t3OiuDWqRfLgnTahb1SK8XJWbi6IxVFCRBWU7qPFOJabTk5aC0fzBjZJdzC8cTfl
# puwhCHX85mEWP3fV2ZGXhAps1AJNdMAU7f05+4PyXhShBLAL6f7uj+FuC7IIs2Fm
# CWqxBjplllnA8DX9ydoojRoRh3CBCqiadR2eOoYFAJ7bgNYl+dwFnidZTHY5W+r5
# paHYgw/R/98wEfmFzzNI9cptZBQselhP00sIScWVZBpjDnk99bOMylitnEJFeW4O
# hxlcVLFltr+Mm9wT6Q1vuC7cZ27JixG1hBSKABlwg3mRl5HUGie/Nx4yB9gUYzwo
# TK8CAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYD
# VR0OBBYEFK5sBaOTE+Ki5+LXHNbH8H/IZ1OgMB8GA1UdIwQYMBaAFK5sBaOTE+Ki
# 5+LXHNbH8H/IZ1OgMA0GCSqGSIb3DQEBDAUAA4ICAQCDJe3o0f2VUs2ewASgkWnm
# XNCE3tytok/oR3jWZZipW6g8h3wCitFutxZz5l/AVJjVdL7BzeIRka0jGD3d4XJE
# lrSVXsB7jpl4FkMTVlezorM7tXfcQHKso+ubNT6xCCGh58RDN3kyvrXnnCxMvEMp
# mY4w06wh4OMd+tgHM3ZUACIquU0gLnBo2uVT/INc053y/0QMRGby0uO9RgAabQK6
# JV2NoTFR3VRGHE3bmZbvGhwEXKYV73jgef5d2z6qTFX9mhWpb+Gm+99wMOnD7kJG
# 7cKTBYn6fWN7P9BxgXwA6JiuDng0wyX7rwqfIGvdOxOPEoziQRpIenOgd2nHtlx/
# gsge/lgbKCuobK1ebcAF0nu364D+JTf+AptorEJdw+71zNzwUHXSNmmc5nsE324G
# abbeCglIWYfrexRgemSqaUPvkcdM7BjdbO9TLYyZ4V7ycj7PVMi9Z+ykD0xF/9O5
# MCMHTI8Qv4aW2ZlatJlXHKTMuxWJU7osBQ/kxJ4ZsRg01Uyduu33H68klQR4qAO7
# 7oHl2l98i0qhkHQlp7M+S8gsVr3HyO844lyS8Hn3nIS6dC1hASB+ftHyTwdZX4st
# Q1LrRgyU4fVmR3l31VRbH60kN8tFWk6gREjI2LCZxRWECfbWSUnAZbjmGnFuoKjx
# guhFPmzWAtcKZ4MFWsmkEDGCA0kwggNFAgEBMG8wWzELMAkGA1UEBhMCQkUxGTAX
# BgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24gVGlt
# ZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQCEAEACyAFs5QHYts+NnmUm6kwCwYJ
# YIZIAWUDBAIBoIIBLTAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwKwYJKoZI
# hvcNAQk0MR4wHDALBglghkgBZQMEAgGhDQYJKoZIhvcNAQELBQAwLwYJKoZIhvcN
# AQkEMSIEIJ1rIN++BodifjxUjvsERgnZ8+gcqpseAgbvsSvni/0KMIGwBgsqhkiG
# 9w0BCRACLzGBoDCBnTCBmjCBlwQgcl7yf0jhbmm5Y9hCaIxbygeojGkXBkLI/1or
# d69gXP0wczBfpF0wWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24g
# bnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hB
# Mzg0IC0gRzQCEAEACyAFs5QHYts+NnmUm6kwDQYJKoZIhvcNAQELBQAEggGAaeQl
# UdugU+TFeNQyXk8XMYD1coB6lEmxp8kUznGYmiXAP0Pyhym2MXW9qVUiekMIvRlG
# 4NTY3WlTq5cWxnTsP0Tc3sq2xRSp3a8LXKZdv4n+DyJ4ODN83Ya2brg6mWur8NyE
# 907t3SUKE3xguzErr2l8nlj9V0UnskDAo9AhtSvpbZJUZs/tN4CWtm/Ne5fgL5bM
# mhscwYp1i89wTQie8RuXZfBMfwkkSis6pdQM1b9raHixBeJpuNRw5Q0MlG9gTY13
# lFLli3k5BumYK8avg3T2lJE4jJwme7sjkZlx6qA05fz+ZJ5K6IjfHiF+2zjbrxjW
# 74wYXZOBP35+6KQpyUxwzDpWFV0I3q55IM6nBKPU7HDaGAMkzTFxXwwva6EDHrZU
# 7vKpBzKBBk5KtHr2pQZbQe17cNis9y6BOx4qQUjhP6bt3abmmADlZNo2eZ+2OaOY
# 0wRqDx+S6qed8rWvvPB1UaWxCZUaK0UEx/DYNFJuZHSqkbJ+1S1CZyDppKvz
# SIG # End signature block
